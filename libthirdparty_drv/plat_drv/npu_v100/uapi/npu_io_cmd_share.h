/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2012-2019. All rights reserved.
 * Description:about npu io cmd share
 */

#ifndef __NPU_IO_CMD_SHARE_H
#define __NPU_IO_CMD_SHARE_H

// fd repsenting npu dev
#define NPU_DEV_SEC_MODE_OPENFD		0X45464153

#define DEVDRV_ID_MAGIC    'D'
#define MAX_NODE_NUM   			4
#define MAX_NODE_NUM_OF_FRAME     8

#define        _IOC_NRBITS          8
#define        _IOC_TYPEBITS        8
#define        _IOC_SIZEBITS       14
#define        _IOC_DIRBITS         2
#define        _IOC_NRMASK       ((1 << _IOC_NRBITS)-1)
#define        _IOC_TYPEMASK     ((1 << _IOC_TYPEBITS)-1)
#define        _IOC_SIZEMASK     ((1 << _IOC_SIZEBITS)-1)
#define        _IOC_DIRMASK      ((1 << _IOC_DIRBITS)-1)
#define        _IOC_NRSHIFT       0
#define        _IOC_TYPESHIFT    (_IOC_NRSHIFT+_IOC_NRBITS)
#define        _IOC_SIZESHIFT    (_IOC_TYPESHIFT+_IOC_TYPEBITS)
#define        _IOC_DIRSHIFT     (_IOC_SIZESHIFT+_IOC_SIZEBITS)
#define        _IOC_TYPE(nr)   (((nr) >> _IOC_TYPESHIFT) & _IOC_TYPEMASK)
#define        _IOC_NR(nr)     (((nr) >> _IOC_NRSHIFT) & _IOC_NRMASK)
#define _IOC_NONE     0U
#define _IOC_WRITE    1U
#define _IOC_READ     2U
#define _IOC(dir, type, nr, size) \
        (((dir)  << _IOC_DIRSHIFT) | \
        ((type) << _IOC_TYPESHIFT) | \
        ((nr)   << _IOC_NRSHIFT) | \
        ((size) << _IOC_SIZESHIFT))

#define _IO(type,nr)          _IOC(_IOC_NONE,(type),(nr),0)
#define _IOR(type,nr,size)    _IOC(_IOC_READ,(type),(nr),sizeof(size))
#define _IOW(type,nr,size)    _IOC(_IOC_WRITE,(type),(nr),sizeof(size))
#define _IOWR(type,nr,size)   _IOC(_IOC_READ|_IOC_WRITE,(type),(nr), sizeof(size))

#define DEVDRV_ALLOC_STREAM_ID	_IO(DEVDRV_ID_MAGIC, 1)
#define DEVDRV_FREE_STREAM_ID	_IO(DEVDRV_ID_MAGIC, 2)
#define DEVDRV_ALLOC_EVENT_ID	_IO(DEVDRV_ID_MAGIC, 3)
#define DEVDRV_FREE_EVENT_ID	_IO(DEVDRV_ID_MAGIC, 4)
#define DEVDRV_REPORT_WAIT	_IO(DEVDRV_ID_MAGIC, 5)
#define DEVDRV_GET_UIO_NUM	_IO(DEVDRV_ID_MAGIC, 6)
#define DEVDRV_MAILBOX_SEND	_IO(DEVDRV_ID_MAGIC, 7)
#define DEVDRV_MAILBOX_WAIT	_IO(DEVDRV_ID_MAGIC, 8)
#define DEVDRV_MAILBOX_GET	_IO(DEVDRV_ID_MAGIC, 9)
#define DEVDRV_MAILBOX_END	_IO(DEVDRV_ID_MAGIC, 10)
#define DEVDRV_ALLOC_MODEL_ID	_IO(DEVDRV_ID_MAGIC, 11)
#define DEVDRV_FREE_MODEL_ID	_IO(DEVDRV_ID_MAGIC, 12)
#define DEVDRV_ALLOC_NOTIFY_ID    	_IO(DEVDRV_ID_MAGIC, 13)
#define DEVDRV_FREE_NOTIFY_ID      	_IO(DEVDRV_ID_MAGIC, 14)
#define DEVDRV_GET_NOTIFY_ID_ADDR   _IO(DEVDRV_ID_MAGIC, 15)

#define DEVDRV_TSMSG_SEND_SYNC		_IO(DEVDRV_ID_MAGIC, 20)
#define DEVDRV_TSMSG_SEND_ASYNC	_IO(DEVDRV_ID_MAGIC, 21)
#define DEVDRV_TSMSG_ASYNC_REGISTER	_IO(DEVDRV_ID_MAGIC, 22)
#define DEVDRV_TSMSG_ASYNC_UNREGISTER	_IO(DEVDRV_ID_MAGIC, 23)
#define DEVDRV_TSMSG_RECEIVE_ASYNC	_IO(DEVDRV_ID_MAGIC, 24)
#define DEVDRV_GET_OCCUPY_STREAM_ID	_IO(DEVDRV_ID_MAGIC, 25)
#define DEVDRV_TSMSG_RECV_ASYNC   _IO(DEVDRV_ID_MAGIC, 26)
#define DEVDRV_ALLOC_TASK_ID        _IO(DEVDRV_ID_MAGIC, 27)
#define DEVDRV_FREE_TASK_ID         _IO(DEVDRV_ID_MAGIC, 28)
#define DEVDRV_GET_TS_TIMEOUT_ID   _IO(DEVDRV_ID_MAGIC, 30)
#define DEVDRV_SET_SECURE_FLAG     _IO(DEVDRV_ID_MAGIC, 31)
#define DEVDRV_GET_SECURE_FLAG     _IO(DEVDRV_ID_MAGIC, 32)
#define DEVDRV_EXIT_SHAERE_MEM     _IO(DEVDRV_ID_MAGIC, 33)
#define DEVDRV_FLUSH_SMMU_TLB      _IO(DEVDRV_ID_MAGIC, 34)
#define DEVDRV_MMAP_DB             _IO(DEVDRV_ID_MAGIC, 35)
#define DEVDRV_UNMAP_DB            _IO(DEVDRV_ID_MAGIC, 36)
#define DEVDRV_MMAP_POWER_STATUS   _IO(DEVDRV_ID_MAGIC, 37)
#define DEVDRV_UNMAP_POWER_STATUS  _IO(DEVDRV_ID_MAGIC, 38)

#define DEVDRV_CUSTOM_IOCTL        _IO(DEVDRV_ID_MAGIC, 64)

#define DEVDRV_MAX_CMD	65

/* ****custom ioctrl****** */
typedef enum {
	DEVDRV_IOC_VA_TO_PA,	// current only use in lite
	DEVDRV_IOC_GET_SVM_SSID,	// current only use in lite
	DEVDRV_IOC_GET_CHIP_INFO,	// current only use in lite
	DEVDRV_IOC_ALLOC_CONTIGUOUS_MEM,	// current only use in lite
	DEVDRV_IOC_FREE_CONTIGUOUS_MEM,	// current only use in lite
	DEVDRV_IOC_GET_SHM_MEM_TA_VADDR,	//get sq cq info db mem ta vaddr
	DEVDRV_IOC_MMAP_PHY_MEM_TA_VADDR,	// map phy mem in platdrv and return TA vaddr to TA
	DEVDRV_IOC_UNMAP_HIAI_TA_VADDR,	// unmap TA vaddr mapped in platdrv
	DEVDRV_IOC_POWERUP,
	DEVDRV_IOC_POWERDOWN,
	DEVDRV_IOC_REBOOT,
} npu_custom_ioc_t;

/* manager */
#define DEVDRV_MANAGER_MAGIC                     'M'
#define DEVDRV_MANAGER_GET_PCIINFO               _IO(DEVDRV_MANAGER_MAGIC, 1)
#define DEVDRV_MANAGER_GET_DEVNUM                _IO(DEVDRV_MANAGER_MAGIC, 2)
#define DEVDRV_MANAGER_GET_PLATINFO              _IO(DEVDRV_MANAGER_MAGIC, 3)
#define DEVDRV_MANAGER_SVMVA_TO_DEVID            _IO(DEVDRV_MANAGER_MAGIC, 4)
#define DEVDRV_MANAGER_GET_CHANNELINFO           _IO(DEVDRV_MANAGER_MAGIC, 5)
#define DEVDRV_MANAGER_CONFIG_CQ                 _IO(DEVDRV_MANAGER_MAGIC, 6)
#define DEVDRV_MANAGER_DEVICE_STATUS             _IO(DEVDRV_MANAGER_MAGIC, 7)
#define DEVDRV_MANAGER_IPC_EVENT_CREATE          _IO(DEVDRV_MANAGER_MAGIC, 8)
#define DEVDRV_MANAGER_IPC_EVENT_OPEN            _IO(DEVDRV_MANAGER_MAGIC, 9)
#define DEVDRV_MANAGER_IPC_EVENT_RECORD          _IO(DEVDRV_MANAGER_MAGIC, 10)
#define DEVDRV_MANAGER_IPC_EVENT_WAIT            _IO(DEVDRV_MANAGER_MAGIC, 11)
#define DEVDRV_MANAGER_IPC_EVENT_RECORD_COMPLETE _IO(DEVDRV_MANAGER_MAGIC, 12)
#define DEVDRV_MANAGER_IPC_EVENT_WAIT_COMPLETE   _IO(DEVDRV_MANAGER_MAGIC, 13)
#define DEVDRV_MANAGER_IPC_EVENT_QUERY           _IO(DEVDRV_MANAGER_MAGIC, 14)
#define DEVDRV_MANAGER_IPC_EVENT_CLOSE           _IO(DEVDRV_MANAGER_MAGIC, 15)
#define DEVDRV_MANAGER_IPC_EVENT_DESTROY         _IO(DEVDRV_MANAGER_MAGIC, 16)
#define DEVDRV_MANAGER_GET_CORE_SPEC             _IO(DEVDRV_MANAGER_MAGIC, 17)
#define DEVDRV_MANAGER_GET_CORE_INUSE            _IO(DEVDRV_MANAGER_MAGIC, 18)
#define DEVDRV_MANAGER_GET_DEVIDS                _IO(DEVDRV_MANAGER_MAGIC, 19)
#define DEVDRV_MANAGER_GET_DEVINFO               _IO(DEVDRV_MANAGER_MAGIC, 20)
#define DEVDRV_MANAGER_GET_PCIE_ID_INFO          _IO(DEVDRV_MANAGER_MAGIC, 21)
#define DEVDRV_MANAGER_GET_FLASH_COUNT           _IO(DEVDRV_MANAGER_MAGIC, 22)
#define DEVDRV_MANAGER_GET_FLASH_INFO            _IO(DEVDRV_MANAGER_MAGIC, 23)
#define DEVDRV_MANAGER_GET_VOLTAGE               _IO(DEVDRV_MANAGER_MAGIC, 24)
#define DEVDRV_MANAGER_GET_TEMPERATURE           _IO(DEVDRV_MANAGER_MAGIC, 25)
#define DEVDRV_MANAGER_GET_AI_USE_RATE           _IO(DEVDRV_MANAGER_MAGIC, 26)
#define DEVDRV_MANAGER_GET_FREQUENCY             _IO(DEVDRV_MANAGER_MAGIC, 27)
#define DEVDRV_MANAGER_GET_POWER                 _IO(DEVDRV_MANAGER_MAGIC, 28)
#define DEVDRV_MANAGER_GET_HEALTH_CODE           _IO(DEVDRV_MANAGER_MAGIC, 29)
#define DEVDRV_MANAGER_GET_ERROR_CODE            _IO(DEVDRV_MANAGER_MAGIC, 30)
#define DEVDRV_MANAGER_GET_DDR_CAPACITY          _IO(DEVDRV_MANAGER_MAGIC, 31)
#define DEVDRV_MANAGER_LPM3_SMOKE                _IO(DEVDRV_MANAGER_MAGIC, 32)
#define DEVDRV_MANAGER_BLACK_BOX_GET_EXCEPTION   _IO(DEVDRV_MANAGER_MAGIC, 33)
#define DEVDRV_MANAGER_DEVICE_MEMORY_DUMP        _IO(DEVDRV_MANAGER_MAGIC, 34)
#define DEVDRV_MANAGER_DEVICE_RESET_INFORM       _IO(DEVDRV_MANAGER_MAGIC, 35)
#define DEVDRV_MANAGER_GET_MODULE_STATUS         _IO(DEVDRV_MANAGER_MAGIC, 36)
#define DEVDRV_MANAGER_GET_DEVICE_DMA_ADDR       _IO(DEVDRV_MANAGER_MAGIC, 37)
#define DEVDRV_MANAGER_GET_INTERRUPT_INFO        _IO(DEVDRV_MANAGER_MAGIC, 38)
#define DEVDRV_MANAGER_INTERRUPT_RECV_SIGNAL     _IO(DEVDRV_MANAGER_MAGIC, 39)
#define DEVDRV_MANAGER_GPIOIRQ_REGISTER          _IO(DEVDRV_MANAGER_MAGIC, 40)
#define DEVDRV_MANAGER_GPIOIRQ_WAIT_INT          _IO(DEVDRV_MANAGER_MAGIC, 41)
#define DEVDRV_MANAGER_GET_MINI_DEVID            _IO(DEVDRV_MANAGER_MAGIC, 42)
#define DEVDRV_MANAGER_GET_MINI_BOARD_ID         _IO(DEVDRV_MANAGER_MAGIC, 43)
#define DEVDRV_MANAGER_PCIE_PRE_RESET            _IO(DEVDRV_MANAGER_MAGIC, 44)
#define DEVDRV_MANAGER_PCIE_RESCAN               _IO(DEVDRV_MANAGER_MAGIC, 45)
#define DEVDRV_MANAGER_ALLOC_HOST_DMA_ADDR       _IO(DEVDRV_MANAGER_MAGIC, 46)
#define DEVDRV_MANAGER_FREE_HOST_DMA_ADDR        _IO(DEVDRV_MANAGER_MAGIC, 47)
#define DEVDRV_MANAGER_PCIE_SRAM_READ            _IO(DEVDRV_MANAGER_MAGIC, 48)
#define DEVDRV_MANAGER_PCIE_SRAM_WRITE           _IO(DEVDRV_MANAGER_MAGIC, 49)
#define DEVDRV_MANAGER_GET_USER_CONFIG           _IO(DEVDRV_MANAGER_MAGIC, 50)
#define DEVDRV_MANAGER_GET_EMMC_VOLTAGE          _IO(DEVDRV_MANAGER_MAGIC, 51)
#define DEVDRV_MANAGER_GET_DEVICE_BOOT_STATUS    _IO(DEVDRV_MANAGER_MAGIC, 52)
#define DEVDRV_MANAGER_ENABLE_EFUSE_LDO          _IO(DEVDRV_MANAGER_MAGIC, 53)
#define DEVDRV_MANAGER_DISABLE_EFUSE_LDO         _IO(DEVDRV_MANAGER_MAGIC, 54)
#define DEVDRV_MANAGER_GET_TSENSOR               _IO(DEVDRV_MANAGER_MAGIC, 55)
#define DEVDRV_MANAGER_CHECK_CANCEL_STATUS       _IO(DEVDRV_MANAGER_MAGIC, 56)
#define DEVDRV_MANAGER_DFX_CMD                   _IO(DEVDRV_MANAGER_MAGIC, 57)
#define DEVDRV_MANAGER_CONTAINER_CMD             _IO(DEVDRV_MANAGER_MAGIC, 58)
#define DEVDRV_MANAGER_GET_HOST_PHY_MACH_FLAG    _IO(DEVDRV_MANAGER_MAGIC, 59)
#define DEVDRV_MANAGER_LOAD_KERNEL_LIB           _IO(DEVDRV_MANAGER_MAGIC, 60)
#define DEVDRV_MANAGER_GET_KERNEL_LIB            _IO(DEVDRV_MANAGER_MAGIC, 61)
#define DEVDRV_MANAGER_GET_LOCAL_DEVICEIDS       _IO(DEVDRV_MANAGER_MAGIC, 62)
#define DEVDRV_MANAGER_IMU_SMOKE                 _IO(DEVDRV_MANAGER_MAGIC, 63)
#define DEVDRV_MANAGER_SYSTEM_RDY_CHECK          _IO(DEVDRV_MANAGER_MAGIC, 64)
#define DEVDRV_MANAGER_IPC_NOTIFY_CREATE         _IO(DEVDRV_MANAGER_MAGIC, 65)
#define DEVDRV_MANAGER_IPC_NOTIFY_OPEN           _IO(DEVDRV_MANAGER_MAGIC, 66)
#define DEVDRV_MANAGER_IPC_NOTIFY_CLOSE          _IO(DEVDRV_MANAGER_MAGIC, 67)
#define DEVDRV_MANAGER_IPC_NOTIFY_DESTROY        _IO(DEVDRV_MANAGER_MAGIC, 68)
#define DEVDRV_MANAGER_SET_NEW_TIME              _IO(DEVDRV_MANAGER_MAGIC, 69)
#define DEVDRV_MANAGER_CONFIG_DISABLE_WAKELOCK   _IO(DEVDRV_MANAGER_MAGIC, 70)
#define DEVDRV_MANAGER_PCIE_DDR_READ             _IO(DEVDRV_MANAGER_MAGIC, 71)
#define DEVDRV_MANAGER_PCIE_DDR_WRITE            _IO(DEVDRV_MANAGER_MAGIC, 72)
#define DEVDRV_MANAGER_GET_TRANSWAY              _IO(DEVDRV_MANAGER_MAGIC, 73)
#define DEVDRV_MANAGER_GET_CPU_INFO              _IO(DEVDRV_MANAGER_MAGIC, 74)
#define DEVDRV_MANAGER_INVAILD_TLB               _IO(DEVDRV_MANAGER_MAGIC, 75)

#define DEVDRV_MANAGER_SEND_TO_IMU   _IO(DEVDRV_MANAGER_MAGIC, 76)
#define DEVDRV_MANAGER_RECV_FROM_IMU _IO(DEVDRV_MANAGER_MAGIC, 77)

#define DEVDRV_MANAGER_GET_HBM_CAPACITY       _IO(DEVDRV_MANAGER_MAGIC, 78)
#define DEVDRV_MANAGER_GET_DDR_BW_UTILIZATION _IO(DEVDRV_MANAGER_MAGIC, 79)
#define DEVDRV_MANAGER_GET_HBM_BW_UTILIZATION _IO(DEVDRV_MANAGER_MAGIC, 80)
#define DEVDRV_MANAGER_GET_IMU_INFO           _IO(DEVDRV_MANAGER_MAGIC, 81)
#define DEVDRV_MANAGER_GET_ECC_STATICS        _IO(DEVDRV_MANAGER_MAGIC, 82)
#define DEVDRV_MANAGER_CONFIG_ECC_ENABLE      _IO(DEVDRV_MANAGER_MAGIC, 83)
#define DEVDRV_MANAGER_GET_DDR_UTILIZATION    _IO(DEVDRV_MANAGER_MAGIC, 84)
#define DEVDRV_MANAGER_GET_HBM_UTILIZATION    _IO(DEVDRV_MANAGER_MAGIC, 85)
#define DEVDRV_MANAGER_GET_PMU_VOLTAGE        _IO(DEVDRV_MANAGER_MAGIC, 86)
#define DEVDRV_MANAGER_GET_BOARD_TYPE         _IO(DEVDRV_MANAGER_MAGIC, 87)
#define DEVDRV_MANAGER_CFG_DDR_STAT_INFO      _IO(DEVDRV_MANAGER_MAGIC, 88)

#define DEVDRV_MANAGER_CMD_MAX_NR 89

#endif
