/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2019-2019. All rights reserved.
 * Description: secboot TA
 * Create: 2019/10/23
 */
#ifndef __SECBOOT_VERIFY_H__
#define __SECBOOT_VERIFY_H__
#include "sre_syscalls_ext.h"
#include "tee_common.h"
#include "tee_internal_api.h"

#define PARAMS_COUNT 4
#define PARAM_ZERO   0
#define PARAM_ONE    1
#define PARAM_TWO    2
#define PARAM_THREE  3

#define BITS32       32

/*
 * @ingroup  TEE_COMMON_DATA
 *
 * The command ID support by secboot security service
 */
enum SVC_SECBOOT_CMD_ID {
	/* Secboot Task: Invalid ID */
	SECBOOT_CMD_ID_INVALID = 0x0,
	/* Secboot Task: Copy VRL */
	SECBOOT_CMD_ID_COPY_VRL,
	/* Secboot Task: Copy image */
	SECBOOT_CMD_ID_COPY_DATA,
	/* Sceboot Task: Verify */
	SECBOOT_CMD_ID_VERIFY_DATA,
	/* Secboot Task: Reset SoC Request */
	SECBOOT_CMD_ID_RESET_IMAGE,
	/* Secboot Task: Copy VRL and transfer it to SoC type */
	SECBOOT_CMD_ID_COPY_VRL_TYPE,
	/* Secboot Task: Copy image and transfer it to SoC type */
	SECBOOT_CMD_ID_COPY_DATA_TYPE,
	/* Secboot Task: Verify and tansfer it to SoC type */
	SECBOOT_CMD_ID_VERIFY_DATA_TYPE,
	/* Secboot Task: Verify locally and transfer it to SoC type */
	SECBOOT_CMD_ID_VERIFY_DATA_TYPE_LOCAL,
	/* Secboot Task: Copy image from secure buffer to run addr */
	SECBOOT_CMD_ID_COPY_IMG_TYPE,
	/* Secboot Task: Execute modem call function */
	SECBOOT_CMD_ID_BSP_MODEM_CALL,
	/* Secboot Task: Execute modem call ext function */
	SECBOOT_CMD_ID_BSP_MODEM_CALL_EXT,
	/* Secboot Task: Get the random number which is generated by hardware */
	SECBOOT_CMD_ID_GET_RNG_NUM,
	/* Secboot Task: Load modem teeos so image to secure os*/
	SECBOOT_CMD_ID_BSP_LOAD_MODEM_TEEOS,
	/* Secboot Task: Unload modem teeos so image */
	SECBOOT_CMD_ID_BSP_UNLOAD_MODEM_TEEOS,
};

TEE_Result seb_reset_image(uint32_t paramtypes, TEE_Param params[PARAMS_COUNT]);
TEE_Result seb_copy_vrl_type(uint32_t paramtypes,
			     TEE_Param params[PARAMS_COUNT]);
TEE_Result seb_copy_soc_data_type(uint32_t paramtypes,
				  TEE_Param params[PARAMS_COUNT]);
TEE_Result seb_verify_soc_data_type(uint32_t paramtypes,
				    TEE_Param params[PARAMS_COUNT]);
TEE_Result seb_verify_soc_data_type_local(uint32_t paramtypes,
					  TEE_Param params[PARAMS_COUNT]);
TEE_Result seb_copy_soc_img_type(uint32_t paramtypes,
				 TEE_Param params[PARAMS_COUNT]);
#ifdef HW_RANDOM_HISI_TRNG
TEE_Result seb_get_rng_num(uint32_t paramtypes, TEE_Param params[PARAMS_COUNT]);
#else
static inline TEE_Result seb_get_rng_num(uint32_t paramtypes, TEE_Param params[PARAMS_COUNT])
{
	(void)paramtypes;
	(void)params;
	return TEE_ERROR_GENERIC;
}
#endif
#endif
