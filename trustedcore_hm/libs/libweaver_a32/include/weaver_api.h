/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2019-2020. All rights reserved.
 * Description: .h file for <weaver project>
 * Author: c00351135
 * Create: 2019-09-10
 */

#ifndef WEAVER_API_H
#define WEAVER_API_H

#include "tee_internal_api.h"
#include "tee_ext_api.h"

typedef enum {
    MSPWEAVER_ERROR_OK = 0,
    MSPWEAVER_ERROR_FAILED = 1,
    MSPWEAVER_ERROR_TYPE_SOFTWARE = 0xE21004FE,
    MSPWEAVER_ERROR_TYPE_HARDWARE = 0xE21004FF,
    MSPWEAVER_ERROR_MSP_WEAVER_INVALID = 0xE2100500,
    MSPWEAVER_ERROR_CALCHASH_INPUT_NULL = 0xE2100501,
    MSPWEAVER_ERROR_CALCHASH_MEMCPY_FAILED = 0xE2100502,
    MSPWEAVER_ERROR_CHECKHASH_FAILED = 0xE2100503,
    MSPWEAVER_ERROR_CHECKHASH_MEMCMP_FAILED = 0xE2100504,
    MSPWEAVER_ERROR_READERS_EXCEEDS_MAX = 0xE2100505,
    MSPWEAVER_ERROR_MSP_READER_NOT_FOUND = 0xE2100506,
    MSPWEAVER_ERROR_GETSLOTS_CHECK_PARAM_FAILED = 0xE2100507,
    MSPWEAVER_ERROR_GETSLOTS_SECFLASH_IS_ABSENCE = 0xE2100508,
    MSPWEAVER_ERROR_GETSLOTS_MSP_NOT_OPEN = 0xE2100509,
    MSPWEAVER_ERROR_WRITE_CHECK_PARAM_NULL = 0xE210050A,
    MSPWEAVER_ERROR_WRITE_CHECK_PARAM_LEN = 0xE210050B,
    MSPWEAVER_ERROR_WRITE_PACK_MEMCPY_FAILED = 0xE210050C,
    MSPWEAVER_ERROR_WRITE_PACK_CALCHASH_FAILED = 0xE210050D,
    MSPWEAVER_ERROR_WRITE_MSP_NOT_OPEN = 0xE210050F,
    MSPWEAVER_ERROR_READ_WRONGKEY_PARAM_NULL = 0xE2100510,
    MSPWEAVER_ERROR_READ_BACKOFF_PARAM_NULL = 0xE2100511,
    MSPWEAVER_ERROR_READ_SUCCESS_PARAM_NULL = 0xE2100512,
    MSPWEAVER_ERROR_READ_CHECKHASH_FAILED = 0xE2100513,
    MSPWEAVER_ERROR_READ_MEMCPY_FAILED = 0xE2100514,
    MSPWEAVER_ERROR_READ_CHECK_PARAM_NULL = 0xE2100516,
    MSPWEAVER_ERROR_READ_CHECK_PARAM_LEN = 0xE2100517,
    MSPWEAVER_ERROR_READ_PACK_MEMCPY_FAILED = 0xE2100518,
    MSPWEAVER_ERROR_READ_PACK_CALCHASH_FAILED = 0xE2100519,
    MSPWEAVER_ERROR_READ_MSP_NOT_OPEN = 0xE210051A,
    MSPWEAVER_ERROR_ERASE_MSP_NOT_OPEN = 0xE210051B,
    MSPWEAVER_ERROR_ERASEALL_MSP_NOT_OPEN = 0xE210051C,
    MSPWEAVER_ERROR_GETSTATUS_CHECK_PARAM_COUNT = 0xE210051D,
    MSPWEAVER_ERROR_GETSTATUS_CHECK_PARAM_TIME = 0xE210051E,
    MSPWEAVER_ERROR_GETSTATUS_MSP_NOT_OPEN = 0xE2100520,
    MSPWEAVER_ERROR_SLOTID_EXCEEDS_MAX = 0xE2100521,
    MSPWEAVER_ERROR_GETERROR_CHECK_PARAM_FAILED = 0xE2100522,
    MSPWEAVER_ERROR_SA_GETSTATUS_FAILED = 0xE2100523,
    MSPWEAVER_ERROR_SA_LOAD_FAILED = 0xE2100524,
    MSPWEAVER_ERROR_SA_INSTALL_FAILED = 0xE2100525,
    MSPWEAVER_ERROR_SA_AID_MEMCPY_FAILED = 0xE2100526,
    MSPWEAVER_ERROR_SA_INSTANCE_AID_MEMCPY_FAILED = 0xE2100527,
    MSPWEAVER_ERROR_MSP_READER_MEMSET_FAILED = 0xE2100528,
    MSPWEAVER_ERROR_GETSTATUS_SECFLASH_IS_ABSENCE = 0xE2100529,
    MSPWEAVER_ERROR_GETSLOTS_NOT9000 = 0xE2110000,
    MSPWEAVER_ERROR_WRITE_NOT9000 = 0xE2120000,
    MSPWEAVER_ERROR_READ_NOT9000 = 0xE2130000,
    MSPWEAVER_ERROR_GETSTATUS_NOT9000 = 0xE2140000,
} WeaverErrorCode;

TEE_Result TEE_EXT_WeaverGetNumSlots(
    uint32_t *num_slots);

TEE_Result TEE_EXT_WeaverWrite(
    uint32_t slotid,
    const uint8_t *key,
    uint32_t key_len,
    const uint8_t *value,
    uint32_t value_len);

TEE_Result TEE_EXT_WeaverRead(
    uint32_t slotid,
    const uint8_t *key,
    uint32_t key_len,
    uint8_t *status,
    uint8_t *value,
    uint32_t *value_len,
    uint32_t *timeout);

TEE_Result TEE_EXT_WeaverErase(
    uint32_t slotid);

TEE_Result TEE_EXT_WeaverEraseAll(
    void);

TEE_Result TEE_EXT_WeaverGetStatus(
    uint32_t slotid,
    uint32_t *fail_count,
    uint32_t *timeout);

TEE_Result TEE_EXT_WeaverGetErrorType(
    uint32_t error);

#endif
