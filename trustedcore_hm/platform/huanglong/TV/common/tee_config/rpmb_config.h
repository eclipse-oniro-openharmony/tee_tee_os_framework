/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 * Description: rpmb operation config
 * Create: 2020-02-13
 */
#ifndef RPMB_CONFIG_H
#define RPMB_CONFIG_H

#include <tee_config.h>
#include <product_uuid.h>
#include "product_uuid_public.h"
#include <sre_access_control.h>

static const struct ta_permission g_rpmb_permission_config[] = {
    { TEE_SERVICE_RPMB,           0, RPMB_GENERIC_PERMISSION | RPMB_SPECIFIC_PERMISSION },
#ifdef DEF_ENG
    { TEE_SERVICE_DEMO,      0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_ECHO,           0, RPMB_GENERIC_PERMISSION | RPMB_SPECIFIC_PERMISSION },
    { TEE_SERVICE_UT,             0, RPMB_GENERIC_PERMISSION | RPMB_SPECIFIC_PERMISSION },
    { TEE_SERVICE_TEST_API,       0, RPMB_GENERIC_PERMISSION | RPMB_SPECIFIC_PERMISSION },
    { TEE_SERVICE_KERNELMEMUSAGE, 0, RPMB_GENERIC_PERMISSION | RPMB_SPECIFIC_PERMISSION },
#endif
    { TEE_SERVICE_KEYMASTER_HISI,      0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_FINGERPRINT,    0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_RPMBKEY,        0, RPMB_GENERIC_PERMISSION | RPMB_SPECIFIC_PERMISSION },
    { TEE_SERVICE_SIGNTOOL,       0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_SKYTONE,        0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_ANTITHEFT,      0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_IFAA,           0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_VOICE_REC,      0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_PKI,            0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_FACE_REC,       0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_PERM,           0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_PANPAY,         0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_CHINADRM,       0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_BLOCK_CHAIN,    0, RPMB_GENERIC_PERMISSION },
    { TEE_CHANNEL_IPK,            0, RPMB_GENERIC_PERMISSION },
    { TEE_SERVICE_GATEKEEPER_HISI,     0, RPMB_GENERIC_PERMISSION },
};

static const uint32_t g_rpmb_permission_number = sizeof(g_rpmb_permission_config) / sizeof(g_rpmb_permission_config[0]);

#define UT_THRESHOLD_SIZE 0x100000U
#define TEST_API_THRESHOLD_SIZE (32U * 1024U)
#define RPMBKEY_THRESHOLD_SIZE (10U * 1024U)
#define SKYTONE_THRESHOLD_SIZE (500U * 1024U)
#define ANTITHEFT_THRESHOLD_SIZE (20U * 1024U)
#define SIGNTOOL_THRESHOLD_SIZE (10U * 1024U)
#define KEYMASTER_THRESHOLD_SIZE (50U * 1024U)
#define PKI_THRESHOLD_SIZE (32U * 1024U)
#define IFAA_THRESHOLD_SIZE (20U * 1024U)
#define FACE_REC_THRESHOLD_SIZE (400U * 1024U)
#define VOICE_REC_THRESHOLD_SIZE (10U * 1024U)
#define RPMB_THRESHOLD_SIZE (40U * 1024U)
#define PERM_THRESHOLD_SIZE (40U * 1024U)
#define PANPAY_THRESHOLD_SIZE 1024U
#define CHINADRM_THRESHOLD_SIZE (10U * 1024U)
#define BLOCK_CHAIN_THRESHOLD_SIZE (5U * 1024U)
#define IPK_THRESHOLD_SIZE 512U
#define GATEKEEPER_THRESHOLD_SIZE (36U * 1024U)
#define HSM_RPMB_KET_THRESHOLD_SIZE (2U * 1024U)
#define WEAVER_TA_THRESHOLD_SIZE  (128U * 256U)
#define REMOTE_PIN_THRESHOLD_SIZE (1U * 1024U)
#define MULTIDRM_THRESHOLD_SIZE   (6U * 1024U)
static const struct ta_sec_fs_threshold g_ta_rpmb_threshold_config[] = {
/* DO NOT EDIT */
#ifdef DEF_ENG
    { TEE_SERVICE_UT,              UT_THRESHOLD_SIZE },
    { TEE_SERVICE_TEST_API,        TEST_API_THRESHOLD_SIZE },
    { TEE_SERVICE_KERNELMEMUSAGE,  UT_THRESHOLD_SIZE },
#endif
    /* DO NOT EDIT */
    { TEE_SERVICE_FINGERPRINT, 0 },
    { TEE_SERVICE_RPMBKEY,     RPMBKEY_THRESHOLD_SIZE },
    { TEE_SERVICE_SKYTONE,     SKYTONE_THRESHOLD_SIZE },
    { TEE_SERVICE_ANTITHEFT,   ANTITHEFT_THRESHOLD_SIZE },
    { TEE_SERVICE_SIGNTOOL,    SIGNTOOL_THRESHOLD_SIZE },
    { TEE_SERVICE_KEYMASTER_HISI,   KEYMASTER_THRESHOLD_SIZE },
    { TEE_SERVICE_PKI,         PKI_THRESHOLD_SIZE },
    { TEE_SERVICE_IFAA,        IFAA_THRESHOLD_SIZE },
    { TEE_SERVICE_FACE_REC,    FACE_REC_THRESHOLD_SIZE },
    { TEE_SERVICE_VOICE_REC,   VOICE_REC_THRESHOLD_SIZE },
    { TEE_SERVICE_RPMB,        RPMB_THRESHOLD_SIZE },
    { TEE_SERVICE_PERM,        PERM_THRESHOLD_SIZE },
    { TEE_SERVICE_PANPAY,      PANPAY_THRESHOLD_SIZE },
    { TEE_SERVICE_CHINADRM,    CHINADRM_THRESHOLD_SIZE },
    { TEE_SERVICE_BLOCK_CHAIN, BLOCK_CHAIN_THRESHOLD_SIZE },
    { TEE_CHANNEL_IPK,         IPK_THRESHOLD_SIZE },
    { TEE_SERVICE_GATEKEEPER_HISI,  GATEKEEPER_THRESHOLD_SIZE },
};
static const uint32_t g_rpmb_ta_number = sizeof(g_ta_rpmb_threshold_config) / sizeof(g_ta_rpmb_threshold_config[0]);

#endif
