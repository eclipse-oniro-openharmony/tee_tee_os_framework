/****************************************************************************
* The confidential and proprietary information contained in this file may    *
* only be used by a person authorised under and to the extent permitted      *
* by a subsisting licensing agreement from ARM Limited or its affiliates.    *
* 	(C) COPYRIGHT [2001-2017] ARM Limited or its affiliates.	     *
*	    ALL RIGHTS RESERVED						     *
* This entire notice must be reproduced on all copies of this file           *
* and copies of this file may only be made by a person if such person is     *
* permitted to do so under the terms of a subsisting license agreement       *
* from ARM Limited or its affiliates.					     *
*****************************************************************************/

#ifndef _CC_DH_KG_H
#define _CC_DH_KG_H


#include "cc_dh.h"

#ifdef __cplusplus
extern "C"
{
#endif

/*! @file
@brief This file defines the API that supports Diffie-Hellman domain.
*/

/************************ Defines ******************************/

#define CC_DH_SEED_MIN_SIZE_IN_BYTES    CC_HASH_SHA1_DIGEST_SIZE_IN_BYTES
#define CC_DH_SEED_MIN_SIZE_IN_BITS     (CC_DH_SEED_MIN_SIZE_IN_BYTES * 8)

/************************ Enums ********************************/


/************************ Typedefs  ****************************/

/* temp buffers, used in different DH KG functions */

/* temp data buffer structure for domain parameters generation in DH */
typedef struct CCDhKgData_t
{
	/* The aligned input and output temp buffers */
	uint32_t TempBuff1[CC_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];
	uint32_t TempBuff2[CC_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];
	uint32_t TempBuff3[CC_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];
	uint32_t TempBuff4[CC_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];
	uint32_t TempBuff5[CC_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];
	uint32_t TempBuff6[CC_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];

	CCDhTemp_t  ExpTemps;
}CCDhKgData_t;

typedef struct CCDhKgCheckTemp_t
{
	uint32_t         CheckTempBuff[3*CC_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];
	CCDhKgData_t    DhKgBuff;
}CCDhKgCheckTemp_t;

/* DH Domain generation values definitions */
#define DH_X942_PRIME_MOD_MIN_VAL    1024
#define DH_X942_PRIME_MOD_MAX_VAL    2048
#define DH_X942_PGEN_COUNTER_CONST   4096
#define DH_X942_HASH_SIZE_BITS        160
#define DH_SEED_MAX_ADDING_VAL  0xFFFFFFFF

/************************ Structs  ******************************/

/************************ Public Variables **********************/

/************************ Public Functions **********************/


/******************************************************************************************/
/*!
@brief This function generates DH domain parameters in Galois prime field according to the ANSI X9.42-2003: Public Key Cryptography for the Financial Services Industry:
Agreement of Symmetric Keys Using Discrete Logarithm Cryptography standard.
It receives the required sizes (in bits) of the modulus, the generator's order, and the seed, and then generates the prime modulus and the generator
according to these parameters.
If generateSeed argument is set to 1, the function generates and outputs the random seed. Otherwise (if set to 0), the seed has to be passed as an input argument.
According to implementation value of the user passed seed should be not greate, than (2^seedSizeBits - 2^32).
The Seed and some additional parameters, generated by the function (factorJ, pgenCounter), are used for checking that all domain parameters are generated
according to the standard and not forged.
\note All buffer parameters should be in Big-Endian form.

@return CC_OK on success.
@return A non-zero value on failure as defined cc_dh_error.h.
*/
CIMPORT_C CCError_t CC_DhCreateDomainParams(
                CCRndContext_t *rndContext_ptr,             /*!< [in/out] Pointer to the RND context buffer. */
                uint32_t          modPsizeBits,             /*!< [in] Size of the modulus (Prime) in bits equal 256*n, where n >= 4. FIPS Publication 186-4: Digital
								      Signature Standard (DSS) defines sizes 1024 and 2048 bit. Maximal size is 4096 bits. */
                uint32_t          orderQsizeBits,           /*!< [in]  Size of the Generator's order in bits. FIPS Publication 186-4: Digital Signature Standard
								       (DSS) defines orderQSizeBits = 160 for modulus 1024 bit and 224 or 256 bit for modPSizeBits = 2048.
								       It is not recommended to use sizes > 256. The API returns an error if orderQSizeBits > modPSizeBits/4.
								       The allowed sizes are multiples of 32 bits. */
                uint32_t          seedSizeBits,             /*!< [in]  Seed size in bits. Requirements: modPSizeBits >= seedSizeBits >= orderQSizeBits
								      (the first is required by our implementation). */
                uint8_t          *modP_ptr,                 /*!< [out] Pointer to the modulus (Prime) buffer of defined structure. The size of the
								       buffer for output generated value must be no less than modulus size. */
                uint8_t          *orderQ_ptr,               /*!< [out] Pointer to the order Q of generator. The size of the buffer for output generated
								       value must be no less than the order size. */
                uint8_t          *generatorG_ptr,           /*!< [out] Pointer to the generator of multiplicative subgroup in GF(P).
								       If the user does not need this output, then both the pointer and the buffer size must be set
								       to 0. */
                uint32_t         *generGsizeBytes_ptr,      /*!< [in/out] Pointer to the one word buffer for outputting the generator's size.
								          The passed size (if needed) must be no less than modulus size.
								          The function returns the actual size of the generator. */
                uint8_t          *factorJ_ptr,              /*!< [out] Pointer to the buffer for integer factor J. If NULL, the function does not output
								       this parameter. */
                uint32_t         *JsizeBytes_ptr,           /*!< [in/out] Pointer to the size of integer factor J. If NULL, the function does not output
								          this parameter. */
                uint8_t          *seedS_ptr,                /*!< [in/out] Random seed used for prime generation. The size of the buffer for output
								          generated value must be at least the seed size. */
                int8_t            generateSeed,             /*!< [in] Flag defining whether the seed should be generated randomly by the function
								      (1) or passed by the user (0). */
                uint32_t         *pgenCounter_ptr,          /*!< [out] Pointer to counter of tries to generate the primes. If NULL, the function does not
							               output this parameter. */
                CCDhKgData_t    *DHKGbuff_ptr               /*!< [out] The temp buffer of defined structure for internal calculations. */
);


/******************************************************************************************/
/*!
@brief This function receives DH domain parameters, seed and prime generation counter and then verifies that the domain was created according to
the ANSI X9.42-2003: Public Key Cryptography for the Financial Services Industry: Agreement of Symmetric Keys Using Discrete Logarithm
Cryptography standard. The seed should be no greater than (2^seedSizeBits - 2^32), otherwise an error is returned.
\note All buffer parameters should be in Big-Endian form. For a description of
the parameters see ::CC_EcpkiPublKeyBuildAndCheck.

@return CC_OK on success.
@return A non-zero value on failure as defined cc_dh_error.h.
*/
CIMPORT_C CCError_t CC_DhCheckDomainParams(
                CCRndContext_t *rndContext_ptr,             /*!< [in/out] Pointer to the RND context buffer. */
                uint8_t               *modP_ptr,                /*!< [in] Pointer to the modulus (Prime). */
                uint32_t               modPsizeBytes,           /*!< [in] Size of the modulus (Prime) in bytes. */
                uint8_t               *orderQ_ptr,              /*!< [in] Pointer to the order Q of generator. The size of the buffer for output generated value
								     must be no less than the order size. */
                uint32_t               orderQsizeBytes,         /*!< [in]  Size of the Generator's order in bytes. */
                uint8_t               *generatorG_ptr,          /*!< [in]  Pointer to the generator of the multiplicative subgroup in GF(P). */
                uint32_t               generatorSizeBytes,      /*!< [in]  Size of the generator in bytes. */
                uint8_t               *seedS_ptr,               /*!< [in]  Random seed used for prime generation.  */
                uint32_t               seedSizeBits,            /*!< [in]  Seed size in bits.  */
                uint32_t               pgenCounter,             /*!< [in]  Counter of prime generation attempts. */
                CCDhKgCheckTemp_t   *checkTempBuff_ptr      /*!< [in]  Temporary buffer for internal calculations. */

);


#ifdef __cplusplus
}
#endif

#endif
