/* ***************************************************************************
 * This confidential and proprietary software may be used only as authorized *
 * by a licensing agreement from ARM Israel.                                 *
 * Copyright (C) 2015 ARM Limited or its affiliates. All rights reserved.    *
 * The entire notice above must be reproduced on all authorized copies and   *
 * copies may only be made to the extent permitted by a licensing agreement  *
 * from ARM Israel.                                                          *
 * ************************************************************************** */

#ifndef _SaSi_DH_KG_H
#define _SaSi_DH_KG_H

#include "sasi_dh.h"

#ifdef __cplusplus
extern "C" {
#endif

/* ! @file
@brief This module defines the API that supports Diffie-Hellman domain.
*/

/* *********************** Defines **************************** */

#define SaSi_DH_SEED_MIN_SIZE_IN_BYTES SaSi_HASH_SHA1_DIGEST_SIZE_IN_BYTES
#define SaSi_DH_SEED_MIN_SIZE_IN_BITS  (SaSi_DH_SEED_MIN_SIZE_IN_BYTES * 8)

/* *********************** Enums ****************************** */

/* *********************** Typedefs  ************************** */

/* temp buffers, used in different DH KG functions */

/* temp data buffer structure for domain parameters generation in DH */
typedef struct SaSi_DHKGData_t {
    /* The aligned input and output temp buffers */
    uint32_t TempBuff1[SaSi_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];
    uint32_t TempBuff2[SaSi_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];
    uint32_t TempBuff3[SaSi_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];
    uint32_t TempBuff4[SaSi_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];
    uint32_t TempBuff5[SaSi_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];
    uint32_t TempBuff6[SaSi_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];

    SaSi_DH_Temp_t ExpTemps;
} SaSi_DHKGData_t;

typedef struct SaSi_DHKG_CheckTemp_t {
    uint32_t CheckTempBuff[3 * SaSi_DH_MAX_MOD_BUFFER_SIZE_IN_WORDS];
    SaSi_DHKGData_t DhKgBuff;
} SaSi_DHKG_CheckTemp_t;

/* DH Domain generation values definitions */
#define DH_X942_PRIME_MOD_MIN_VAL  1024
#define DH_X942_PRIME_MOD_MAX_VAL  2048
#define DH_X942_PGEN_COUNTER_CONST 4096
#define DH_X942_HASH_SIZE_BITS     160
#define DH_SEED_MAX_ADDING_VAL     0xFFFFFFFF

/* *********************** Structs  **************************** */

/* *********************** Public Variables ******************** */

/* *********************** Public Functions ******************** */

/* *************************************************************************************** */
/* !
@brief This function generates DH domain parameters in Galois prime field according to standard [ANSI X9.42].
It receives the required sizes (in bits) of the modulus, the generator's order, and the seed, and then generates the
prime modulus and the generator according to these parameters. If generateSeed argument is set to 1, the function
generates and outputs the random seed. Otherwise (if set to 0), the seed has to be passed as an input argument.
According to implementation value of the user passed seed should be not greate, than (2^seedSizeBits - 2^32).
The Seed and some additional parameters, generated by the function (factorJ, pgenCounter), are used for checking that
all domain parameters are generated according to the standard and not forged. \note All buffer parameters should be in
Big-Endian form.

@return SaSi_OK on success.
@return A non-zero value on failure as defined sasi_dh_error.h.
*/
CIMPORT_C SaSiError_t SaSi_DH_CreateDomainParams(
    SaSi_RND_Context_t *rndContext_ptr, /* !< [in/out] Pointer to the RND context buffer. */
    uint32_t modPsizeBits,   /* !< [in]  Size of the modulus (Prime) in bits equal 256*n, where n >= 4. FIPS 186-4
                                  defines sizes 1024 and 2048 bit. */
    uint32_t orderQsizeBits, /* !< [in]  Size of the Generator's order in bits. FIPS 186-4 defines orderQSizeBits = 160
                                  for modulus 1024 bit and 224 or 256 bit for modPSizeBits = 2048. It is not recommended
                                  to use sizes > 256. The API returns an error if orderQSizeBits > modPSizeBits/4 */
    uint32_t seedSizeBits,   /* !< [in]  Seed size in bits. Requirements: modPSizeBits >= seedSizeBits >= orderQSizeBits
  (the first is required by our implementation). */
    uint8_t *modP_ptr,       /* !< [out] Pointer to the modulus (Prime) buffer of defined structure. The size of the
  buffer for output generated value must be no less than modulus size. */
    uint8_t *orderQ_ptr,     /* !< [out] Pointer to the order Q of generator. The size of the buffer for output generated
  value must be no less than the order size. */
    uint8_t *generatorG_ptr, /* !< [out] Pointer to the generator of multiplicative subgroup in GF(P).
  If the user does not need this output, then both the pointer and the buffer size must be set
  to 0. */
    uint32_t *generGsizeBytes_ptr, /* !< [in/out] Pointer to the one word buffer for outputting the generator's size.
        The passed size (if needed) must be no less than modulus size.
        The function returns the actual size of the generator. */
    uint8_t *factorJ_ptr, /* !< [out] Pointer to the buffer for integer factor J. If NULL, the function does not output
this parameter. */
    uint32_t *JsizeBytes_ptr,  /* !< [in/out] Pointer to the size of integer factor J. If NULL, the function does not
    output  this parameter. */
    uint8_t *seedS_ptr,        /* !< [in/out] Random seed used for prime generation. The size of the buffer for output
    generated value must be at least the seed size. */
    int8_t generateSeed,       /* !< [in]  Flag defining whether the seed should be generated randomly by the function
    (1) or passed by the user (0). */
    uint32_t *pgenCounter_ptr, /* !< [out] Pointer to counter of tries to generate the primes. If NULL, the function does
        not output this parameter. */
    SaSi_DHKGData_t *DHKGbuff_ptr /* !< [out] The temp buffer of defined structure for internal calculations. */
);

/* *************************************************************************************** */
/* !
@brief This function receives DH domain parameters, seed and prime generation counter and then verifies that the domain
was created according to the standard [ANSI X9.42]. The seed should be no greater than (2^seedSizeBits - 2^32),
otherwise an error is returned. \note All buffer parameters should be in Big-Endian form. For a description of the
parameters see ::_DX_ECPKI_BuildPublKey_MTK.

@return SaSi_OK on success.
@return A non-zero value on failure as defined sasi_dh_error.h.
*/
CIMPORT_C SaSiError_t SaSi_DH_CheckDomainParams(
    SaSi_RND_Context_t *rndContext_ptr, /* !< [in/out] Pointer to the RND context buffer. */
    uint8_t *modP_ptr,                  /* !< [in] Pointer to the modulus (Prime). */
    uint32_t modPsizeBytes,             /* !< [in] Size of the modulus (Prime) in bytes. */
    uint8_t *orderQ_ptr,      /* !< [in] Pointer to the order Q of generator. The size of the buffer for output generated
     value      must be no less than the order size. */
    uint32_t orderQsizeBytes, /* !< [in]  Size of the Generator's order in bytes. */
    uint8_t *generatorG_ptr,  /* !< [in]  Pointer to the generator of the multiplicative subgroup in GF(P). */
    uint32_t generatorSizeBytes,             /* !< [in]  Size of the generator in bytes. */
    uint8_t *seedS_ptr,                      /* !< [in]  Random seed used for prime generation.  */
    uint32_t seedSizeBits,                   /* !< [in]  Seed size in bits.  */
    uint32_t pgenCounter,                    /* !< [in]  Counter of prime generation attempts. */
    SaSi_DHKG_CheckTemp_t *checkTempBuff_ptr /* !< [in]  Temporary buffer for internal calculations. */

);

#ifdef __cplusplus
}
#endif

#endif
